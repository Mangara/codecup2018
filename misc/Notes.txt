Name: Messier31 (black hole at the center of the Andromeda galaxy)

- Once the size of the largest connected free component is 1, the optimal strategy is obvious: fill up the worst x holes, where x is your number of pieces remaining.

- Disconnected free components can be played independently, except for the fact that each remaining number can be used at most once.

- Playing in larger free components should be favored over closing holes. (Unless you think you can trick your opponent to play sub-optimally in the larger component?)
 x Not necessarily. It is sometimes good to close a hole to `pass' in the larger component. This lets you react to the opponent, instead of the other way around.

- Even in the mid-game, situations may arise where some holes can no longer contribute to the final score, because they will be filled in no matter what happens in the remaining components.
 x This is quite restrictive, though: if you're losing, you may prefer to keep that (-1)-hole open

- Components quickly become trees -> solving optimal play for trees (or even paths) may be interesting

- When I create a hole that wins for me, I can assign the lowest opponent stone to that hole.
 x Not necessarily (assuming optimal play), although it may be a good time-saving optimisation

- From any position, before evaluating or planning, we can assume that both players optimally fill in the already created holes.
 x Not necessarily: depending on the holes in the area still to be played, any of the remaining holes could be the best one for us at the end

- For 2-holes, we can compute the smallest number needed to 'flip' the current winner.

- Playing a move is always better than passing (not playing anything). This means that null-move pruning should work well and not introduce any search instability. It also implies a 1st player advantage.
 x Not true at all. In the extreme case, if the opponent plays all their pieces and then you play all your pieces, you win easily.
 x In the mid-game this expresses itself as filling a hole: this essentially 'passes' the turn in the other components by playing a move that could have been postponed to the end of the game first. This allows you to react to the opponent's moves instead of them reacting to you.

When playing randomly:
- The order of playing numbers does not matter
- The locations *do* matter, even if the numbers are random
- Playing non-holes before holes increases odds of winning
- Playing tiles with many adjacent free tiles also increases odds of winning
- When playing with these location constraints, playing higher numbers first *does* increase odds of winning

At the top level, giving an alpha-beta window of [alpha, +infinity] means "I already know how to get alpha. I'm only intersted in doing strictly better."

When calling alpha-beta with a window of [alpha, beta], the result X should be interpreted as:
X <= alpha       ---> the true score is <= alpha
alpha < X < beta ---> the true score is X
X >= beta        ---> the true score is >= beta
This means that a result of alpha or beta, by itself, is never enough.

- There are (36 choose 5) = 376992 possible boards. It may be possible to pre-compute a good first move for all of these.

- I expect each TranspositionEntry to take 24 bytes (8 (class) + 8 (long) + 1 (byte) + 4 (int) + 1 (byte) + 1 (byte) = 23 => (alignment) 24 bytes). If that is correct, I could use 20-22 bit keys to store ~1-4 million entries in 24-96 MB.

- Result from UCB parameter tests: for non-RAVE version with heuristic seeding, UCB parameter 0.1 and initial heuristic weight 200 is a good trade-off.