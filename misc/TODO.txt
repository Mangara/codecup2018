== Architecture

- Add a transposition table. This will really help speed up researching when the aspiration window wasn't right.

- Use a single integer (long) to represent each move. There are only 3 components, two with 8 possible values (location) and one with 15 possible values. These need 3, 3, and 4 bits, so only 10 bits total, leaving room for some later additions if we want to get fancy.

- Generate positions and values seperately?

== Tournaments

- For evaluation, add something that tracks the number of positions evaluated (calls to the recursive search function?). Most optimizations aim to reduce this.

== Players

- Count (at least for debug) the total number of states evaluated / move
- Add some debug output for the competition bot (time taken per move, final value?)

- In an endgame situation (only holes left), return the MedianFree evaluation instead of continuing the tree search.

- Try null-move pruning: allow a player to pass (if previous move was not a pass). If this already produces a cut-off, any move would have. This is valid so long as a move is always better than no move, which I think is true here. Not quite: if you wait until your opponent has placed all their stones, it is trivial to win. We should only allow null moves when the opponent won't run out of moves before we reach the max depth.

- Implement killer move heuristic: keep track of moves that cause beta cutoffs and try them first. Possibly per-ply? First perhaps just print moves that cause beta-cutoffs to get a sense of what they look like.

- Implement iterative deepening. This will directly translate speed improvements into quality improvements. Use different aspiration windows for the first call (which uses the previous move value) and subsequent ones (which use the previous iteration value).

- Make a UCB player
- Make a NegaScout/PVS player?

- At top level, try moves with a medium value first? (Start at 15, 8, and 1. Move pointer down, up, and up, respectively.) Perhaps if the max move doesn't improve the value significantly, take the medium value move?

== Move generation

- MoveGenerator for moves that create holes that win for me
- AB should include moves that block good opponent moves
- Order moves by expected value. (ExpectedOrder MoveGenerator, and perhaps a general OrderBy(Evaluator)) Is there a fast way we can do just expected value?


== Board state evaluation

- Try total hole value (should outperform median at the start). May be a good `approximation' of expected value, as it relies only on local information.



=== DONE

X Finish endgame test
X Expy with NoHoles should outperform regular Expy.
X Have tournament alternate player1 and player2
X Add statistics to Tournament output: which players are *significantly* better than others? (compute p-value and present a sorted list of comparisons)
X Play tournament: SimpleMax(MF, NH) vs Expy vs Rando vs AB(MF,NH,2) vs AB(EV,NH,2)
X In the GUI player, when a tile is selected, try each number and print the new expected value, the delta, the new median-free and its delta for each number.
X Make a NegaMax player: http://mediocrechess.sourceforge.net/guides/alphabetasearch.html
X Make a player that maintains a list of connected component boards. On each board, all free holes expect for those in its component are blocked. When a move splits a component, create new boards, etc. Each turn, find the best move in the largest component. Or in each and pick among them in some way.
X Try aspiration search: store expected value found at the end of the previous search (or guess or eval), and run the new search with a window (guess - epsilon, guess + epsilon). If this fails, adjust the window up or down, depending on the direction of the failure.
X Speed up evaluation. Profiling shows that the majority of the time is spent here. Perhaps we can track the value as it changes and have an IterativeEvaluator that can be attached to a board or something.
X Make the timing test deterministic by giving a specific random generator.
X In the time evaluation, give more stats: minimum, *maximum*, median, quartiles.
X Have the board generate (all/all non-hole) positions, returned as moves with value 0
X In MaximumInfluenceMoves, use the value of the move to temporarily store the number of free spaces, then sort by this and set the values correctly.
X In bitboard, precompute neighbours for all positions

=== WONTFIX

- Add multithreading support to tournaments?
 => Too much effort (making players that work well with multi-threading) for too little gain