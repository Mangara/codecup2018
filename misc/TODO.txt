== Architecture

- Try a version of the CachingBoard that uses a bitboard for free positions, my tiles, and opponent tiles?

- Try enumerating all free spots with a simple loop through all bit positions instead of the current (expensive) calls to Long. If we want to get really fancy, we can do this depending on the number.

- Try running with compiler flags to see what's being inlined vs what isn't: -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining

== Tournaments

== Players

- In endgame evaluation, add standard evaluation/100.

- Implement iterative deepening. This will directly translate speed improvements into quality improvements. Use different aspiration windows for the first call (which uses the previous move value) and subsequent ones (which use the previous iteration value).

- Implement killer move heuristic: keep track of moves that cause beta cutoffs and try them first. Possibly per-ply? First perhaps just print moves that cause beta-cutoffs to get a sense of what they look like.

- Look into clock management
 x For a bunch of random games, (and my games on the server?), figure out how much time I needed to search each move to a fixed depth. Assign clock time proportional to this.

- Do not try the best stored move if it results from a fail low? In this case, many of the subtrees were most likely not explored very deeply (fast beta cutoffs) and the best move is perhaps not very meaningful...

- Store both an upper and lower bound in a transposition table entry?

- Try null-move pruning: allow a player to pass (if previous move was not a pass). If this already produces a cut-off, any move would have. This is valid so long as a move is always better than no move, which I think is true here. Not quite: if you wait until your opponent has placed all their stones, it is trivial to win. We should only allow null moves when the opponent won't run out of moves before we reach the max depth.

- Implement principal variation search / negascout:
 x https://www.ics.uci.edu/~eppstein/180a/990202b.html

- Make a UCB player


== Move generation

- If there is a component of size 2, can we ignore one of them? If there is a free spot with 1 free neighbour, and that neighbour has a hole value that is worse for me, is it ever a good idea to play here? Or always better to play the neighbour?

- Can we maintain free positions sorted in likely moves order? It may be worth the overhead to store them in a sorted set.

- Sort moves that generate holes closer to the front. Perhaps include something like "the lowest number of free spots around a neighbouring free spot"?

- Order moves by expected value? (ExpectedOrder MoveGenerator, and perhaps a general OrderBy(Evaluator)) Is there a fast way we can do just expected value?


== Board state evaluation

- Try MedianExpected? Compute the expected value of each hole, but take the median instead of the average.

- Test evaluation functions:
 x Make a random position generator where I can specify a set of turns that I want. Only return states in those turns.
 x Generate positions then run the evaluation function, then do a FULL negamax evaluation of that state. Compare the results.


=== DONE

X Finish endgame test
X Expy with NoHoles should outperform regular Expy.
X Have tournament alternate player1 and player2
X Add statistics to Tournament output: which players are *significantly* better than others? (compute p-value and present a sorted list of comparisons)
X Play tournament: SimpleMax(MF, NH) vs Expy vs Rando vs AB(MF,NH,2) vs AB(EV,NH,2)
X In the GUI player, when a tile is selected, try each number and print the new expected value, the delta, the new median-free and its delta for each number.
X Make a NegaMax player: http://mediocrechess.sourceforge.net/guides/alphabetasearch.html
X Make a player that maintains a list of connected component boards. On each board, all free holes expect for those in its component are blocked. When a move splits a component, create new boards, etc. Each turn, find the best move in the largest component. Or in each and pick among them in some way.
X Try aspiration search: store expected value found at the end of the previous search (or guess or eval), and run the new search with a window (guess - epsilon, guess + epsilon). If this fails, adjust the window up or down, depending on the direction of the failure.
X Speed up evaluation. Profiling shows that the majority of the time is spent here. Perhaps we can track the value as it changes and have an IterativeEvaluator that can be attached to a board or something.
X Make the timing test deterministic by giving a specific random generator.
X In the time evaluation, give more stats: minimum, *maximum*, median, quartiles.
X Have the board generate (all/all non-hole) positions, returned as moves with value 0
X In MaximumInfluenceMoves, use the value of the move to temporarily store the number of free spaces, then sort by this and set the values correctly.
X In bitboard, precompute neighbours for all positions
X For evaluation, add something that tracks the number of positions evaluated (calls to the recursive search function?). Most optimizations aim to reduce this.
X Count (at least for debug) the total number of states evaluated / move
X Add a transposition table. This will really help speed up researching when the aspiration window wasn't right.
 x Hash: generate a random number for each board spot. Make sure the numbers chosen don't have small subsets that xor to 0. For each position and possible value, xor together the (spot number * value). This is easy to update incrementally.
 x Generate a second random number set of X bits to compute the hash table key (table size = 2^X) in the same way.
 x In the table, store: full hash, best move, depth this position has been searched to, score, type (exact, LB, UB), age?
 x Replacement scheme: if we want to store a position, but its table entry already contains another position, replace if: the other is old, or has been searched to less depth.
 x David Eppstein has pseudo-code: https://www.ics.uci.edu/~eppstein/180a/970424.html
X Generate positions and values seperately?
X Make sure all possible values for the board make up a contiguous set of 32 numbers. That way computing the hash is much easier. I think all that needs to be done for this is setting 'blocked' to 16.
X Use a single integer (byte) to represent a location: 0-64, corresponding to 8 * a + b. This way we can use single-dimensional arrays for the board and don't need to transform back and forth all the time.
X Use a single integer (int) to represent each move. There are only 3 components, two with 8 possible values (location) and one with 15 possible values. These need 3, 3, and 4 bits, so only 10 bits total, leaving room for a sorting score in the top 22 bits. Then, to sort the moves by some score, we just set their top 22 bits appropriately and then use the default numeric sorting algorithm. This also lets the minimax return both a move and its evaluation in one return value. Make sure that all evaluations fit in 22 bits and make utility functions (in util?) to get/set this.
X PerformanceTest that plays full games versus identical opponents. If we keep generating the same moves, this will give a fair comparison of number of positions evaluated.
X Re-do aspiration search with slowly widening windows.
X In an endgame situation (only holes left), return the MedianFree evaluation instead of continuing the tree search. This would be easy in IEV, since we maintain the number of connections between free nodes. I'm not sure it would make the program stronger, but it's worth a shot.
X Don't just use the maximum value. Start at 15, 8, and 1. Move pointer down, up, and up, respectively. For player1, try medium-valued moves first, so that these are preferred in case of a tie. Only try holes with the lowest value move.
X Make Board track the number of free-free connections. This allows us to detect the endgame.
X Set alpha/beta based on Transposition table entry even if it doesn't cause a cut-off: https://people.csail.mit.edu/plaat/mtdf.html
X Add more useful debug output for the competition bot (time taken per move, final value?)
X In MaxInfluence, play holes with min
X Make a CachingBoard that:
 x Stores the values in a single 64-length 1D array 
 x Stores the hole values and number of free spots around each spot in the same way
 x To read, just return the array value
 x To update, add/subtract the required value from all neighbouring spots. Spots off the board will never be read, so it doesn't matter if they hold arbitrary values and we don't need to check for them.
X When generating moves, only include the worst hole. 

=== WONTFIX

- Add multithreading support to tournaments?
 => Too much effort (making players that work well with multi-threading) for too little gain
 
- Try total hole value (should outperform median at the start). May be a good `approximation' of expected value, as it relies only on local information.
 => I don't think this will really add much